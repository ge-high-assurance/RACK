# Runs after every pull request or push (except tag-only pushes)

name: RACK Continuous Integration Workflow
on:
  pull_request:
    branches: [ '*' ]
  push:
    branches: [ '*' ]
    tags-ignore: [ '*' ]
  workflow_dispatch:

jobs:

# Lint job:
#  - Lints the RACK CLI, Ontology, and shell scripts

  lint:
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Check out RACK source
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('cli/dev/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Install RACK CLI development dependencies
      run: pip3 install -q -r cli/dev/requirements.txt

    - name: Lint RACK CLI
      run: |
        cd cli
        pylint .
        mypy .

    - name: Lint RACK Ontology
      run: |
        sudo apt-add-repository ppa:swi-prolog/stable
        sudo apt-get update -qq --yes
        sudo apt-get install -qq --yes swi-prolog
        ./assist/bin/check

    - name: Lint shell scripts
      uses: ludeeus/action-shellcheck@1.0.0
      env:
        SHELLCHECK_OPTS: -x -P assist/databin -e SC1008

# Cache job:
#  - Downloads rack-box files
#  - Caches rack-box files

  cache:
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Cache rack-box files
      uses: actions/cache@v2
      id: cache-files
      with:
        path: RACK/rack-box/files
        key: files-${{ github.sha }}

    - name: Check out RACK source
      if: steps.cache-files.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: ge-high-assurance/RACK
        token: ${{ secrets.RACK_CI_PAT }}
        path: RACK

    - name: Check out RACK wiki
      if: steps.cache-files.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: ge-high-assurance/RACK.wiki
        token: ${{ secrets.RACK_CI_PAT }}
        path: RACK.wiki

    - name: Set up Python
      if: steps.cache-files.outputs.cache-hit != 'true'
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      if: steps.cache-files.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('RACK/cli/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Download rack-box files
      if: steps.cache-files.outputs.cache-hit != 'true'
      uses: ./RACK/.github/workflows/actions/download

# Test job:
#  - Runs rack-box tests

  test:
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]

    runs-on: ${{ matrix.os }}
    needs: cache

    steps:
    - name: Check out RACK source
      uses: actions/checkout@v2
      with:
        repository: ge-high-assurance/RACK
        token: ${{ secrets.RACK_CI_PAT }}
        path: RACK

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('RACK/tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Get all files needed by rack-box
      uses: actions/cache@v2
      with:
        path: RACK/rack-box/files
        key: files-${{ github.sha }}

    - name: Install rack-box files on runner
      run: |
        mkdir -p /tmp/files
        for f in RACK/rack-box/files/*; do
          ln -s $(realpath $f) /tmp/files/$(basename $f)
        done
        python3 -m pip install --upgrade pip setuptools wheel
        sudo bash RACK/rack-box/scripts/install.sh $USER

    - name: Run rack-box tests
      run: |
        cd RACK
        pip3 install -r cli/requirements.txt
        pip3 install cli/.
        pip3 install -r tests/requirements.txt
        python3 -m pytest tests

# Build job:
#  - Builds rack-box Docker image
#  - Pushes Docker image to Docker Hub

  build:
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ 3.8 ]

    runs-on: ${{ matrix.os }}
    needs: cache

    steps:
    - name: Check out RACK source
      uses: actions/checkout@v2
      with:
        repository: ge-high-assurance/RACK
        token: ${{ secrets.RACK_CI_PAT }}
        path: RACK

    - name: Get all files needed by rack-box
      uses: actions/cache@v2
      with:
        path: RACK/rack-box/files
        key: files-${{ github.sha }}

    - name: Build rack-box Docker image
      run: |
        cd RACK/rack-box
        packer build -var version=dev rack-box-docker.json

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/master'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push rack-box image to Docker Hub
      if: github.ref == 'refs/heads/master'
      run: docker push gehighassurance/rack-box:dev
