# NOTE: Currently, I'm only putting the minimal amount of definitions here so
# that mypy is happy. This is **not** exhaustive.

# needed for postponing type annotations, to allow a method returning its class
# should be unnecessary in Python 3.10+
from __future__ import annotations
from typing import Iterable, List, Optional

class AdaNode:
    def p_gnat_xref(self, imprecise_fallback: Optional[bool] = False) -> DefiningName: ...
    @property
    def text(self) -> str: ...

class BasicDecl(AdaNode):
    @property
    def p_defining_name(self) -> DefiningName: ...
    @property
    def p_canonical_fully_qualified_name(self) -> str: ...

class Name(AdaNode):
    def p_referenced_decl(self) -> BasicDecl: ...
    @property
    def p_resolve_names(self) -> bool: ...

class CallExpr(AdaNode):
    @property
    def f_name(self) -> Name: ...

class DeclarativePart(AdaNode): ...

class DefiningName(Name):
    @property
    def f_name(self) -> Name: ...
    @property
    def p_basic_decl(self) -> BasicDecl: ...

class DefiningNameList(AdaNode, Iterable[DefiningName]):
    def __iter__(self): ...

class HandledStmts(AdaNode): ...

class PackageBody(AdaNode):
    @property
    def f_decls(self) -> DeclarativePart: ...
    @property
    def f_package_name(self) -> DefiningName: ...
    @property
    def f_stmts(self) -> HandledStmts: ...

class ParamSpec(AdaNode):
    @property
    def f_ids(self) -> DefiningNameList: ...

class ParamSpecList(AdaNode, Iterable[ParamSpec]):
    def __iter__(self): ...

class Params(AdaNode):
    @property
    def f_params(self) -> ParamSpecList: ...

class SubpSpec(AdaNode):
    @property
    def f_subp_name(self) -> DefiningName: ...
    @property
    def f_subp_params(self) -> Params: ...

class SubpBody(AdaNode):
    @property
    def f_decls(self) -> DeclarativePart: ...
    @property
    def f_stmts(self) -> HandledStmts: ...
    @property
    def f_subp_spec(self) -> SubpSpec: ...

class AnalysisUnit:
    @property
    def diagnostics(self) -> str: ...
    @property
    def filename(self) -> str: ...
    @property
    def root(self) -> AdaNode: ...

class AnalysisUnitKind:
    def unit_body(self) -> AnalysisUnitKind: ...
    def unit_specification(self) -> AnalysisUnitKind: ...

class AnalysisContext:
    def __init__(self, unit_provider: UnitProvider) -> None: ...
    def get_from_file(self, file: str) -> AnalysisUnit: ...
    def get_from_provider(self, name: str, kind: AnalysisUnitKind) -> AnalysisUnit: ...

class UnitProvider:
    @classmethod
    def auto(klass, input_files: List[str]) -> UnitProvider: ...
    @classmethod
    def for_project(klass, project: str) -> UnitProvider: ...
