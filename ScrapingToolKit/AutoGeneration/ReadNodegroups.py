#!/usr/bin/env python3
#
# Copyright (c) 2021, General Electric Company, Inc.
#
# All Rights Reserved
#
# This material is based upon work supported by the Defense Advanced Research
# Projects Agency (DARPA) under Contract No. FA8750-20-C-0203.
#
# Any opinions, findings and conclusions or recommendations expressed in this
# material are those of the author(s) and do not necessarily reflect the views
# of the Defense Advanced Research Projects Agency (DARPA).

import os
import json
import semtk3


connString = """
{   "name":"RACK local fuseki Apache Phase 2 Resolved",
    "domain":"",
    "enableOwlImports":false,
    "model":[
        {"type":"fuseki","url":"http://localhost:3030/RACK","graph":"http://rack001/model"}
        ],
    "data":[
        {"type":"fuseki","url":"http://localhost:3030/RACK","graph":"http://rack001/ResolvedData"}
        ]
}"""

def createConstants(classList):
    directoryPath = os.path.dirname(os.path.realpath(__file__))
    pythonFilePath = os.path.realpath(os.path.join(directoryPath, "..","Evidence","CONSTANTS.py"))
    classDict = {}
    for c in classList:
        classDict[createDataNameFromClassName(c)] = c
    with open(pythonFilePath,"w") as pyFile:
        pyString = 'nodegroupMapping = {\n'
        for j in sorted(classDict):
            pyString += '    "'+j+'":"'+classDict[j]+'",\n'
        pyString = pyString.rstrip(",\n") + '}'  
        pyFile.write(pyString)
    return classDict
            
        
def createPython(nodegroups):
    directoryPath = os.path.dirname(os.path.realpath(__file__))
    pythonFilePath = os.path.realpath(os.path.join(directoryPath, "..","Evidence","Add.py"))
    with open(pythonFilePath,"w") as pyFile:
        pyFile.write("""#!/usr/bin/env python3
#
# Copyright (c) 2021, General Electric Company, Galois, Inc.
#
# All Rights Reserved
#
# This material is based upon work supported by the Defense Advanced Research
# Projects Agency (DARPA) under Contract No. FA8750-20-C-0203.
#
# Any opinions, findings and conclusions or recommendations expressed in this
# material are those of the author(s) and do not necessarily reflect the views
# of the Defense Advanced Research Projects Agency (DARPA).
from Logging import *
from Evidence import *
'''


=======================================================================

    This file is Auto-Generated by GenFiles.py. 
        Any changes made to this file may be over written.

=======================================================================
'''
""")
        nodeList = list(nodegroups.keys())
        nodeList.sort()
        for n in nodeList:
            propList = list(nodegroups[n].keys())
            propList.sort()
            pyString = "def "+n+"("
            for p in propList:
                pyString += nodegroups[n][p]["columnName"]+"=None, "
            pyString = pyString.rstrip(", ")+"):\n"
            pyString += '    trace()\n'
            pyString += '    log("Adding Evidence:",str_good("'+n+'"))\n'
            pyString += '    objStr = "<'+n+'>"\n'
            for p in propList:
                pyString += '    objStr += objectDataString("{propName}", {propName})\n'.replace('{propName}',nodegroups[n][p]["columnName"])
            pyString += '    objStr += "</'+n+'>"\n'
            pyString += '    addEvidenceObject(etree.fromstring(objStr))\n\n'
            pyFile.write(pyString)
            
def createXsd(nodegroups):
    directoryPath = os.path.dirname(os.path.realpath(__file__))
    XsdFilePath = os.path.realpath(os.path.join(directoryPath, "..","Evidence","RACK-DATA.xsd"))
    
    with open(XsdFilePath,"w") as xmlFile:
        xmlFile.write('''<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="RACK-DATA">
        <xs:complexType>
            <xs:sequence>
''')
        nodeList = list(nodegroups.keys())
        nodeList.sort()
        for n in nodeList:
            xmlFile.write('                <xs:element name="'+n+'">\n')
            xmlFile.write('                    <xs:complexType>\n')
            xmlFile.write('                        <xs:sequence>\n')
            propList = list(nodegroups[n].keys())
            propList.sort()
            for p in propList:
                xmlFile.write('                            <xs:element name="'+nodegroups[n][p]["columnName"]+\
                              '" type="'+nodegroups[n][p]["relationship"].replace("http://www.w3.org/2001/XMLSchema#","xs:")+\
                              '"/>\n')
            xmlFile.write('                        </xs:sequence>\n')
            xmlFile.write('                    </xs:complexType>\n')
            xmlFile.write('                </xs:element>\n')
        xmlFile.write('''
            </xs:sequence>
        </xs:complexType>
    </xs:element>
</xs:schema>''')
def processNodegroup(classUri):
    nodeProperties = {}    
    data = json.loads(semtk3.get_class_template(classUri, connString, "identifier"))
    for sNode in data["sNodeGroup"]["sNodeList"]:
        for prop in sNode["propList"]:
            if prop["SparqlID"] != "":
                nodeProperties[prop["SparqlID"]] = {}
                nodeProperties[prop["SparqlID"]]["SparqlID"] = prop["SparqlID"]
                nodeProperties[prop["SparqlID"]]["columnName"] = prop["SparqlID"][1:]
                #nodeProperties[prop["SparqlID"]]["UriRelationship"] = prop["UriRelationship"]
                if "rangeURI" in prop:
                    nodeProperties[prop["SparqlID"]]["relationship"] = prop["rangeURI"]
                elif "relationship" in prop:
                    nodeProperties[prop["SparqlID"]]["relationship"] = prop["relationship"]
                else:
                    nodeProperties[prop["SparqlID"]]["relationship"] = "http://www.w3.org/2001/XMLSchema#string"
    return nodeProperties
    
def createDataNameFromClassName(name):
    className = name.split("#")[-1]
    prefix = ""
    if not name.startswith("http://arcos.rack"):        
        prefix = name.split("#")[0]\
                   .replace("http://arcos.","").split("/")[0]\
                   .replace("rack","")\
                   .replace("-","_")\
                   .replace(".","_")\
                   .replace("+","_")\
                   .replace("=","_") + "_"
    return prefix + className        

if __name__ == "__main__":
    
    nodegroups = {}
    semtk3.set_connection_override(connString)
    all_ok = semtk3.check_services();
    if not all_ok: 
        raise Exception("Semtk services are not properly running on localhost")
    
    ClassList = semtk3.get_class_names()
    
    
    classDict = createConstants(ClassList)
    for j in sorted(classDict.keys()):
        print("Processing Nodegroup :",j)
        nodegroups[j] = processNodegroup(classDict[j])
    createXsd(nodegroups)
    createPython(nodegroups)
