% This file contains specific data recognizers and rules that link the
% automatically-generated assist databin information to the
% user-specified abstract/documentation information.

:- multifile data_instance/4, data_get/4.

% The DevelopmentPlan specifies that SOFTWARE#CODE_DEVELOPMENT
% references the plan-defined SoftwareStandard.  This is an
% abstract/documentation linkage that is established by this rule.

data_get('SOFTWARE#CODE_DEVELOPMENT', 'SOFTWARE#referenced',
         sw_devel(_,_,_),
         'http://Turnstile/DevelopmentPlanData#SoftwareStandard').


% The DevelopmentPlan creates a SoftwareIntegration as an instance of
% the SOFTWARE#COMPILE class.  The normal data_get return creates a
% RACK relation, not an RDF relation, so the rdf relation here is
% explicit using predicates not normally needed for data recognizers.
% If the DevelopmentPlan simply specified a SOFTWARE#COMPILE, then
% this data_get recognizer could be removed.
data_get('SOFTWARE#COMPILE', 'PROV-S#identifier', uid(Instance,_,_), Instance) :-
    rack_namespace(NS),
    ns_ref(NS, Instance, RDFInstance),
    add_triple(RDFInstance, rdf:type,
               'http://Turnstile/DevelopmentPlan#SoftwareIntegration').

% Explicit links between software files and documented requirements.
% These cannot be automatically discovered and are project specific.

data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'output.h'),
         'http://Turnstile/CounterApplicationDesignDescription#OUT-LLR-1').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'output.h'),
         'http://Turnstile/CounterApplicationDesignDescription#OUT-LLR-2').

data_get(_, 'SOFTWARE#definedIn', func_decl(_, FileName), FileRef) :-
    build_inputs(Nonce, InpSources),
    build_from(Nonce, Dir),
    member(FileName, InpSources),
    file_instance(Nonce, Dir, FileName, FileRef).

data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'),
         'http://Turnstile/CounterApplicationDesignDescription#IN-LLR-1').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'),
         'http://Turnstile/CounterApplicationDesignDescription#IN-LLR-2').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'),
         'http://Turnstile/CounterApplicationDesignDescription#IN-LLR-3').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'),
         'http://Turnstile/CounterApplicationDesignDescription#IN-LLR-4').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'),
         'http://Turnstile/CounterApplicationDesignDescription#IN-LLR-5').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'hw.h'),
         'http://Turnstile/CounterApplicationDesignDescription#IN-LLR-6').

data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'counter.h'),
         'http://Turnstile/CounterApplicationDesignDescription#EXE-LLR-1').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'counter.h'),
         'http://Turnstile/CounterApplicationDesignDescription#EXE-LLR-2').
data_get('FILE#FILE', 'FILE#satisfies', sw_file_data(_,_,'counter.h'),
         'http://Turnstile/CounterApplicationDesignDescription#EXE-LLR-3').

% Generate explicit links between the automatically-recognized input
% files and the corresponding software functions and data declared in
% those files.

data_instance('SOFTWARE#SWCOMPONENT', load_data, 'output_function',
              [uid('output_function',
                   "output",
                   "C Function: 'output'"),
               func_decl('output_function', 'output.c')]).

data_instance('SOFTWARE#SWCOMPONENT', load_data, 'input_function',
              [uid('input_function',
                   "input function",
                   "C Function: 'input'"),
               func_decl('input_function', 'input.c')]).

data_instance('SOFTWARE#SWCOMPONENT', load_data, 'main_function',
              [uid('main_function',
                   "main function",
                   "C Function: 'main'"),
               func_decl('main_function', 'counter.c')]).

% conf.json is not part of a build, so the format is indeterminate

data_get('FILE#FILE', 'FILE#fileFormat', sw_file_data(_,_,'conf.json'),
         'JSONFile').
data_instance('FILE#FORMAT', load_data, 'JSONFile',
              [ uid('JSONFile', 'JSONFile', 'JSON file format'),
                fmt('JSONFile')]).
