from __future__ import annotations

from typing import Any, Iterable, List, Optional, Tuple, Union

class Node: ...

class Identifier(Node, str): ...

class Literal(Identifier):
    def __new__(cls, identifier: Union[Identifier, str, bytes]) -> Literal: ...

class URIRef(Identifier):
    def __new__(cls, value: str, base: Optional[str] = None) -> URIRef: ...

class Graph:
    def add(self, triple: Tuple[Node, Node, Node]) -> None: ...
    def bind(self, shorthand: str, namespace: Namespace) -> None: ...
    def serialize(self, format: str) -> bytes: ...

class Namespace:
    def __new__(cls, url: str) -> Namespace: ...
    def __getattr__(self, key: str) -> URIRef: ...
    def __getitem__(self, key: str, default: Optional[URIRef] = None) -> URIRef: ...
