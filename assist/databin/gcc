#!/usr/bin/env bash
# shellcheck disable=SC2236,SC2166,SC2162,SC2184,SC1090
#
# Copyright (c) 2020, General Electric Company and Galois, Inc.


# TODO: use -M for internal assist of include files

# shellcheck disable=SC2046
. $(dirname "$0")/rackfuncs.sh

inf=()
outf=''
inclf=''
opts=()
libdirs=()
libs=()

outnxt=0
inclnxt=0
ignnxt=0
declare -a extra

for ARG ; do
    case ${ARG} in
        -o) outnxt=1 ;;
        -MF) inclnxt=1 ;;
        -MT) ignnxt=1 ;;
        -L*) libdirs+=("${ARG:2}") ;;
        -l*) libs+=("lib${ARG:2}") ;;
        *) if (( outnxt )) ; then
               outf="${ARG}"
               outnxt=0
           elif (( inclnxt )) ; then
               inclf="${ARG}"
               inclnxt=0
           elif (( ignnxt )) ; then
               ignnxt=0
           elif [ -r "${ARG}" ] ; then
               inf+=("${ARG}")
           else
               opts+=("${ARG}")
           fi
           ;;
    esac
done

tool=$(basename "$0")
realtool=$(find_in_path_remainder "$tool")

# shellcheck disable=SC2128
if [ -z "${inf}" ] ; then
    # Sometimes things like "gcc --version" is run by configure or
    # other tools to do other things than actually compile, so just
    # execute these without recording rack information.
    "$realtool" "${@}"
    exit $?
fi

# shellcheck disable=SC2128
outf="${outf:-$(basename "$inf" | sed -e "s/\.[^.]*$/.o/")}"
if [ -z "${inclf}" ] ; then
    # shellcheck disable=SC2128
    inclf="$(dirname "${inf}")/.$(basename "${inf}" .c).d"
    extra+=("-MMD" "-MF" "$inclf")
fi
# shellcheck disable=2086
rackf="$(dirname ${outf})/.$(basename ${outf}).rack"
nonce="n$(date +%s)-$$"

(
    export IFS=","
    rack_info_pre "compile" "${opts[@]}"
    echo ":- multifile file_committer/2."
    echo ":- discontiguous file_committer/2."
    echo "build_inputs(${nonce@Q}, [ ${inf[*]@Q} ])."
    echo "build_outputs(${nonce@Q}, [ ${outf@Q} ])."
    for inp in "${inf[@]}" ; do
        git log -n 1 --pretty=format:"file_committer(${inp@Q}, '%al').%n" "$inp" 2>/dev/null
    done
    for lf in "${libs[@]}" ; do
        for ld in "${libdirs[@]}" ; do
            for ext in .so .a ; do
                # shellcheck disable=SC2005,SC2164
                ldr=$(cd "${ld}"; echo $(top_rel_curdir))
                if [ "$ldr" == "." ] ; then lp=${lf}${ext}; else lp=${ldr}/${lf}${ext}; fi
                if [ -f "${lp}" ] ; then
                    echo "build_inputs(${nonce@Q}, [ ${lp@Q} ])."
                    IFS=' ' read sum f < <(sha1sum "$lp")
                    echo "file_sha1(${lp@Q}, ${sum@Q}, ${nonce@Q})."
                    break 2
                fi
            done
        done
    done
) > "${rackf}"

update_make_steps

when_done() {
    rack_info_post >> "${rackf}"
    if [ ! -z "$inclf" -a -r "$inclf" ] ; then
        read -a fl < <(cat "$inclf")
        if [ ${#fl[*]} -gt 1 ] ; then
            unset fl[0]  # remove output file
            IFS=","
            echo "build_inputs(${nonce@Q}, [ ${fl[*]@Q} ])." >> "${rackf}"
            IFS=" "
            for F in "${fl[@]}"; do
                read sum f < <(sha1sum "$F")
                echo "file_sha1(${f@Q}, ${sum@Q}, ${nonce@Q})." >> "${rackf}"
                git log -n 1 --pretty=format:"file_committer(${F@Q}, '%al').%n" "$F" 2>/dev/null >> "${rackf}"
            done
        fi
    fi
    for F in ${outf} "${inf[@]}" ; do
        read sum f < <(sha1sum "$F")
        echo "file_sha1(${f@Q}, ${sum@Q}, ${nonce@Q})." >> "${rackf}"
    done
}
trap when_done EXIT

"$realtool" "${@}" "${extra[@]}"
