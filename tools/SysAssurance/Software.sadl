//
//
// Copyright Â© 2020 General Electric Company
//
// Author: Abha Moitra, Galois Team
// Date: 2020-05-20
// Last update: 2020-05-20
//
//

uri "http://sadl.org/RACK/Software" alias Software.

import "http://sadl.org/RACK/Document".
import "http://sadl.org/RACK/Req".
import "http://sadl.org/RACK/SysAssurance".

// Instruction set architecture targets for software

ISA is a class.
X86 is an ISA.
X86_64 is an ISA.
ARM64 is an ISA.
{X86, X86_64, ARM64} are not the same.

// Software artifacts

// A path in a filesystem
Path is a class
    // Note that the representation of a path is not necessarily unique, and is
    // system dependent. Information such as parent directories should be
    // encoded as relationships.
    described by pathRepresentation with values of type string.

// An FSEntry is something that can be stored on a filesystem: a file or
// directory.
//
// Path is optional, the file attached to an email stored in GMail has no (one)
// path, but is still a file.
FSEntry is a class
    described by fsEntryParentDir with values of type Directory
    described by fsEntryPath with values of type Path.

Directory is a type of FSEntry
    described by directoryContents with values of type FSEntry.

File is a type of FSEntry
    described by fileSha256Sum with values of type string.

// An archive of files, for example, a tar or zip archive.
Archive is a type of File
    described by archiveContains with values of type File.

SourceFile is a type of File
    described by srcFileLanguage with values of type ProgrammingLanguage
    // A source file may be generated by a code generator, for example, yacc or
    // ANTLR.
    described by srcFileGeneratedBy with values of type Executable.

// Non-source software, either compiled or otherwise packaged for release.
DistributedSoftware is a type of File
    described by distTargetingOS with values of type OperatingSystem
    described by distSourcePackage with a single value of type PackageVersion
    // Note that runtime dependencies may be executbles, libraries, or even
    // source files.
    described by distRuntimeDependencies with values of type DistributedSoftware.

CompiledSoftware is a type of DistributedSoftware
    described by compiledSoftwareCompiledBy with a single value of type Compiler
    described by compiledSoftwareTargeting with values of type ABI.

Bytecode is a type of DistributedSoftware.

// A file containing object code
ObjectFile is a type of CompiledSoftware
    described by objectFileTargetingABI with values of type ABI.

SharedLibrary is a type of ObjectFile.

StaticLibrary is a type of ObjectFile.

Executable is a type of ObjectFile
    described by exeName with a single value of type string
    described by exeFormat with a single value of type ExecutableFileFormat
    described by exeLinkage with a single value of type string
    described by exeLinkedBy with values of type Linker.

StaticallyLinkedExecutable is a type of Executable.

DynamicallyLinkedExecutable is a type of Executable.

Interpreter is a type of Executable
    described by interpreterLanguage with a single value of type ProgrammingLanguage.

Linker is a type of Executable.

Compiler is a type of Executable
    described by compilerSourceLanguage with values of type ProgrammingLanguage
    described by compilerTargetLanguage with values of type ProgrammingLanguage
    described by compilerTargetOSes with values of type OperatingSystem
    described by compilerTargetABIs with values of type ABI
    described by compilerTargetISAs with values of type ISA.

BareMetalExecutable is a type of Executable.

// Languages

ProgrammingLanguage is a class.

StandardizedProgrammingLanguage is a type of ProgrammingLanguage
    described by standardPLDocument with a single value of type Document.

ImplementationDefinedLanguage is a type of ProgrammingLanguage
    described by implPLImplementation with a single value of type PackageVersion.

IntermediateLanguage is a type of ProgrammingLanguage.

AssemblyLanguage is a type of ProgrammingLanguage
    described by assemblyISA with a single value of type ISA.

CLanguage is a StandardizedProgrammingLanguage.
PythonLanguage is a ImplementationDefinedLanguage.
JavaLanguage is a ProgrammingLanguage.
{CLanguage, PythonLanguage, JavaLanguage} are not the same.

// Operating systems

ExecutableFileFormat is a class.

OperatingSystemKernel is a type of BareMetalExecutable
    described by kernelImplementsABI with a single value of type ABI
    described by kernelOfOS with values of type OperatingSystem.

// An operating system is essentially a collection of different
// OperatingSystemVersions, which are the specific releases of that OS.
OperatingSystem is a class
    described by osName with a single value of type string
    described by osVendor with a single value of type Entity.

// A specific release, for example, Ubuntu 19.04.
OperatingSystemVersion is a class
    described by osVersionVersion with a single value of type string
    described by osVersionCreationDate with a single value of type date
    described by osVersionOS with a single value of type OperatingSystem
    described by osDefaultPackageManager with values of type PackageVersion
    described by osDefaultPackageRepository with values of type PackageRepository.

versionOfOperatingSystem of OperatingSystemVersion has exactly 1 value.

ABI is a type of Standard
    described by abiExecutableFormat with values of type ExecutableFileFormat.

// A package is essentially a collection of its different versions.
Package is a type of Artifact
    described by packageName with a single value of type string
    described by packageOwner with a single value of type Entity
    described by packageDefaultSource with a single value of type SourceInfo.

// A package version is a specific release of that package, for example, OpenSSL
// 1.2.0-1, as fetched from a specific Github repo. This class is as specific as
// possible about what source code we're discussing so that we can accurately
// assess concerns about provenance.
PackageVersion is a type of Artifact
    // versionString should include distro-specific fields
    described by versionString with a single value of type string
    described by creationDate with a single value of type date
    described by license with values of type License
    described by issuer with a single value of type Entity
    // The location of the source code
    described by packageSource with values of type SourceInfo
    // The location for obtaining the package. e.g. rpm.net
    described by packageRepository with values of type PackageRepository
    // The actual content, e.g. source files and build scripts
    described by packageContents with values of type File
    described by packageVersionTarget with a single value of type OperatingSystemVersion
    described by testDependencies with values of type PackageVersion
    described by buildDependencies with values of type PackageVersion
    described by runtimeDependencies with values of type PackageVersion.

// A DistributedPackage is a collection of source files that have been through
// some build or archiving step, ready to be downloaded and used.
DistributedPackage is a type of Archive
    described by builtFrom with values of type PackageVersion.

// A PackageRepository is a place to get packages from, for example, the Ubuntu
// repositories, or Docker Hub.
PackageRepository is a type of Deployment
    described by containsDistPackage with values of type DistributedPackage.

License is a class
    described by name with a single value of type string
    described by description with a single value of type string
    described by url with a single value of type string
    described by category with a single value of type LicenseCategory
    described by encumbering with a single value of type boolean.

LicenseCategory is a class.
OpenSource is a LicenseCategory.
Proprietary is a LicenseCategory.
{OpenSource, Proprietary} are not the same.

// A Deployment is software that is currently deployed and running on some
// system, for example, the nginx server instance running on some server hosting
// the Ubuntu homepage.
//
// TODO(lb): How does this relate to "SystemInstantation?"
Deployment is a class
    described by deploymentName with a single value of type string
    described by deploymentPackages with values of type PackageVersion.

// A DeploymentTarget is a system on which software is deployed, for example, a
// specific server, phone, drone, etc.
DeploymentTarget is a class
    described by deploymentTargetName with a single value of type string
    described by deploymentTargetDeployed with a single value of type Deployment.

// A collection of metadata about where a set of source files was retrieved from
SourceInfo is a class
    described by sourceType with a single value of type SourceType
    described by sourceIdentity with a single value of type SourceIdent
    described by sourceURL with values of type string
    // e.g. URL of the FTP site the source was retrieved from
    described by sourceLocation with values of type string
    described by sourceTag with a single value of type SourceTag
    described by sourceChanges with a single value of type SourceChanges.

relatedSource describes SourceInfo with a single value of type SourceInfo.  // e.g. original for this fork

SourceType is a class.
GitSourceType is a SourceType.
TarfileSourceType is a SourceType.
BinarySourceType is a SourceType.
RpmSourceType is a SourceType.

// A unique identifier for this collection of source files
SourceIdent is a class
    // For example, a commit hash
    described by identIdent with a single value of type string
    described by identCreationDate with a single value of type date
    // A human-readable "tag" summarizing this identifier, for example, a version string
    described by identTag with a single value of type SourceTag.

// TODO(lb): What is this?
SourceTag is a class
    described by tagType with a single value of type string
    described by tagValue with a single value of type string
    described by tagSignature with values of type GPGSignature.

// Extensible, determines how tagValue interpreted
tagType of SourceTag must be one of { "sha256", "sha512" }.

// SourceChanges is a sequence of changes since the last release, for example,
// a collection of diffs, or a list of git commits.
SourceChanges is a class
    described by sourceChangesFinalCommit with a single value of type SourceIdent
    // TODO(lb): This should be some sort of ordered list
    described by sourceChangesHistory with values of type SourceIdent,
    // TODO(lb): What is this?
    described by sourceChangesOriginChanges with a single value of type SourceChanges.

GPGSignature is a class
    described by sigSigner with values of type GPGIdentity
    described by sigFingerprint with a single value of type string.

GPGIdentity is a class
    described by gpgIdentityEntity with a single value of type Entity
    described by gpgIdentityPublicKey with a single value of type string
    described by gpgIdentityExpirationDate with a single value of type date.

VulnerabilityReport is a type of Artifact.
