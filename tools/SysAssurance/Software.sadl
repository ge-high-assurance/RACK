//
//
// Copyright Â© 2020 General Electric Company
//
// Author: Abha Moitra, Galois Team
// Date: 2020-05-20
// Last update: 2020-05-20
//
//

uri "http://sadl.org/RACK/Software" alias Software.

import "http://sadl.org/RACK/Document".
import "http://sadl.org/RACK/Req".
import "http://sadl.org/RACK/SysAssurance".

// Instruction set architecture targets for software

ISA is a class.
X86 is an ISA.
X86_64 is an ISA.
ARM64 is an ISA.
{X86, X86_64, ARM64} are not the same.

ABI is a type of Standard
    described by abiExecutableFormat with values of type ExecutableFileFormat.


// Software artifacts

// ----------------------------------------------------------------------

// The SoftwareObject is a description of the *structure* of a target
// set of software in a tree structure, where the root is the final
// product and the branches represent the inputs and tools for creating
// that software tree.
//
// Note that this is just the framework.  This does not describe
// specific *instances* of this object as generated at specific times
// by specific inputs or specific tools; all of the specifics are
// represented by the parallel SoftwareInstance tree.
//
// This is the input most likely provided by the group submitting
// the software for analysis and certification (e.g. TA4)

SoftwareObject is a class
  described by is_swobj_type with a single value of type SWObjectType
  // What "runs/executes/evaluates" this object,
  described by swobj_evaluated_by with values of type SoftwareObject
  // What creates this object (a tool).
  described by swobj_builder with values of type SoftwareObject
  described by swobj_input_is with values of type SoftwareObject.

swobj_evaluated_by of SoftwareObject has at most 1 value.
swobj_builder of SoftwareObject has at most 1 value.

SWObjectType is a class.
TarArchive is a type of SWObjectType.
ZipArchive is a type of SWObjectType.
RPMPackage is a type of SWObjectType.
BinaryExecutable is a type of SWObjectType.
ObjectFile is a type of SWObjectType.
ObjectLibrary is a type of SWObjectType.
TextFile is a type of SWObjectType.
BareMetalExecutable is a type of SWObjectType.
Compiler is a type of SWObjectType.
File is a type of SWObjectType.

// Old distinctions still used in TestCase
SourceInfo is a class.
SourceFile is a class.

// The SoftwareInstance is a specific instance of a SoftwareObject.
// It identifies exactly which version of dependencies were associated
// with it, and exactly which versions of tools were used to build it.

SoftwareInstance is a class
  described by is_swInstanceOf with a single value of type SoftwareObject
  // What software environment this instance targets.
  // This must match to the OS/Hardware for this to be a valid/useable instance.
  // If not specified, assumed to be inherited from the input instances
  described by target_swInstance_env_is with a single value of type SoftwareEnvironment
  // What software environment this instance needs to exist.
  // Defaults to the target_swInstance_env_is if not specified.
  described by needs_swInstance_env_is with a single value of type SoftwareEnvironment

  described by from_swLocation_of with a single value of type LocationInfo
  described by instance_input with values of type SoftwareInstance.

SoftwareEnvironment is a class
  described by env_ISA with a single value of type ISA
  described by env_ABI with a single value of type ABI
  described by env_exefmt with a single value of type ExecutableFileFormat.

SoftwareInstanceLocation is a class.
LocationInfo is a SoftwareInstanceLocation.
PackageVersion is a SoftwareInstanceLocation.


// ----------------------------------------------------------------------
// Languages

ProgrammingLanguage is a class.

StandardizedProgrammingLanguage is a type of ProgrammingLanguage
    described by standardPLDocument with a single value of type Document.

ImplementationDefinedLanguage is a type of ProgrammingLanguage
    described by implPLImplementation with a single value of type PackageVersion.

IntermediateLanguage is a type of ProgrammingLanguage.

AssemblyLanguage is a type of ProgrammingLanguage
    described by assemblyISA with a single value of type ISA.

CLanguage is a StandardizedProgrammingLanguage.
PythonLanguage is a ImplementationDefinedLanguage.
JavaLanguage is a ProgrammingLanguage.
{CLanguage, PythonLanguage, JavaLanguage} are not the same.


// ----------------------------------------------------------------------
// Operating systems

ExecutableFileFormat is a class.  // KWQ

OperatingSystemKernel is a type of BareMetalExecutable
    described by kernelImplementsABI with a single value of type ABI
    described by kernelOfOS with values of type OperatingSystem.

// An operating system is essentially a collection of different
// OperatingSystemVersions, which are the specific releases of that OS.
OperatingSystem is a class
    described by osName with a single value of type string
    described by osVendor with a single value of type Entity.

// A specific release, for example, Ubuntu 19.04.
OperatingSystemVersion is a class
    described by osVersionVersion with a single value of type string
    described by osVersionCreationDate with a single value of type date
    described by osVersionOS with a single value of type OperatingSystem
    described by osDefaultPackageManager with values of type PackageVersion
    described by osDefaultPackageRepository with values of type PackageRepository.

versionOfOperatingSystem of OperatingSystemVersion has exactly 1 value.


// ----------------------------------------------------------------------

// A package is essentially a collection of its different versions.
Package is a type of Artifact
    described by packageName with a single value of type string
    described by packageOwner with a single value of type Entity
    described by packageDefaultLocation with a single value of type LocationInfo.

// A package version is a specific release of that package, for example, OpenSSL
// 1.2.0-1, as fetched from a specific Github repo. This class is as specific as
// possible about what source code we're discussing so that we can accurately
// assess concerns about provenance.
PackageVersion is a type of Artifact
    // versionString should include distro-specific fields
    described by versionString with a single value of type string
    described by creationDate with a single value of type date
    described by license with values of type License
    described by issuer with a single value of type Entity
    // The package itself
    described by packageLocation with values of type LocationInfo
    // The location for obtaining the package. e.g. rpm.net
    described by packageRepository with values of type PackageRepository.

// A PackageRepository is a place to get packages from, for example, the Ubuntu
// repositories, or Docker Hub.
PackageRepository is a type of Deployment
    described by containsDistPackage with values of type PackageVersion.

// ----------------------------------------------------------------------

License is a class
    described by name with a single value of type string
    described by description with a single value of type string
    described by url with a single value of type string
    described by category with a single value of type LicenseCategory
    described by encumbering with a single value of type boolean.

LicenseCategory is a class.
OpenSource is a LicenseCategory.
Proprietary is a LicenseCategory.
{OpenSource, Proprietary} are not the same.

// ----------------------------------------------------------------------

// A Deployment is software that is currently deployed and running on some
// system, for example, the nginx server instance running on some server hosting
// the Ubuntu homepage.
//
// TODO(lb): How does this relate to "SystemInstantation?"

Deployment is a class
    described by deploymentName with a single value of type string
    described by deploymentPackages with values of type PackageVersion.

// A DeploymentTarget is a system on which software is deployed, for example, a
// specific server, phone, drone, etc.

DeploymentTarget is a class
    described by deploymentTargetName with a single value of type string
    described by deploymentTargetDeployed with a single value of type Deployment.

// The LocationInfo provides enough information to obtain the
// corresponding software object; inversely, it provides the information
// to identify where an object may have come from (a software object
// might have multiple LocationInfo associations describing alternate
// locations where it could be obtained).

LocationInfo is a class
    described by locType with a single value of type LocationType
    described by locIdentifier with values of type SWObjIdentifier
    described by locURL with values of type string   // TBD: locations that are not URL-describable?
    // The locURL may reference a general location that contains multiple entities;
    // the locSubLocation identifies where in that heirarchy is important for this
    // LocationInfo.  For example, to retrieve Galois' crucible-llvm source, the
    // locURL would be https://github.com/GaloisInc/crucible and the locSubLocation
    // would be "crucible-llvm" to refer to that subdirectory within the repository
    // specified by locURL.
    described by locSubLocation with values of type string
    described by locTag with a single value of type LocationTag
    described by sourceChanges with a single value of type SourceChanges. // KWQ ??

// A particular location may have alternatives.  Examples are forked
// Github repositories, repositories which change ownership or location
// where they are hosted, etc.

relatedLocation describes LocationInfo with a single value of type LocationInfo.

LocationTag is a class.
LocationIdentifier is a class.
SourceIdent is a class.

LocationType is a class.
GitLocationType is a LocationType.
TarfileLocationType is a LocationType.
BinaryLocationType is a LocationType.
RpmLocationType is a LocationType.

// Identification of the software object found at the LocationInfo to
// ensure that the expected object was found.  An object may be
// identified by any number of different identifiers.

SWObjIdentifier is a class
    // An optional, ideally unique identifier for this software
    // object.  For example an md5sum or sha1sum of the software
    // object if the software object is a file.
    described by identIdent with a single value of type string
    // identType specifies how to interpret identIdent
    described by identType with a single value of type IdentType
    described by identCreationDate with a single value of type date
    // Zero or more tags which can be attached to this identity to validate this identification.
    described by identTag with values of type IdentTag.


IdentType is a class.
Filename is an IdentType.
MD5sum is an IdentType.
SHA1sum is an IdentType.


// An Identifier Tag is verification information that can be attached
// to a SWObjIdentifier to validate or provide more information about
// that identifier.

IdentTag is a class
    described by tagSignature with values of type GPGSignature.

// Extensible, determines how tagValue interpreted
tagType of IdentTag must be one of { "sha256", "sha512" }.

// SourceChanges is a sequence of changes since the last release, for example,
// a collection of diffs, or a list of git commits.
SourceChanges is a class
    described by sourceChangesFinalCommit with a single value of type LocationIdentifier
    // TODO(lb): This should be some sort of ordered list
    described by sourceChangesHistory with values of type SourceIdent,  // KWQ ??
    // TODO(lb): What is this?
    described by sourceChangesOriginChanges with a single value of type SourceChanges.

GPGSignature is a class
    described by sigSigner with values of type GPGIdentity
    described by sigFingerprint with a single value of type string.

GPGIdentity is a class
    described by gpgIdentityEntity with a single value of type Entity
    described by gpgIdentityPublicKey with a single value of type string
    described by gpgIdentityExpirationDate with a single value of type date.
